from typing import List

from pydantic import BaseModel, root_validator


class Vulnerability(BaseModel):
    data: dict
    id: str
    source: str
    description: str
    base_severity: str
    severity_score: float
    exploitability_score: float
    references: List[str]

    @root_validator(pre=True)
    def extract_data(cls, values):
        data = values.get("data", {})
        cve = data.get("cve", {})

        id = cve.get("id", "")
        source = data.get("sourceIdentifier", "")
        description = next(
            (
                desc["value"]
                for desc in cve.get("descriptions", [])
                if desc["lang"] == "en"
            ),
            "",
        )
        metrics = cve.get("metrics", {}).get("cvssMetricsV2", [{}])[0]
        base_severity = metrics.get("baseSeverity", "")
        severity_score = metrics.get("cvssData", {}).get("baseScore", 0.0)
        exploitability_score = metrics.get("exploitabilityScore", 0.0)
        references = [ref["url"] for ref in cve.get("references", [])]

        return {
            "data": data,
            "id": id,
            "source": source,
            "description": description,
            "base_severity": base_severity,
            "severity_score": severity_score,
            "exploitability_score": exploitability_score,
            "references": references,
        }

    class Config:
        populate_by_name = True
